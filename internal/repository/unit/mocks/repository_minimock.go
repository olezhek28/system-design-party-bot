package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/olezhek28/system-design-party-bot/internal/repository/unit.Repository -o ./mocks/repository_minimock.go -n RepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/olezhek28/system-design-party-bot/internal/model"
	mm_unit_repository "github.com/olezhek28/system-design-party-bot/internal/repository/unit"
)

// RepositoryMock implements unit_repository.Repository
type RepositoryMock struct {
	t minimock.Tester

	funcGetList          func(ctx context.Context, filter *mm_unit_repository.Query) (upa1 []*model.Unit, err error)
	inspectFuncGetList   func(ctx context.Context, filter *mm_unit_repository.Query)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mRepositoryMockGetList
}

// NewRepositoryMock returns a mock for unit_repository.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetListMock = mRepositoryMockGetList{mock: m}
	m.GetListMock.callArgs = []*RepositoryMockGetListParams{}

	return m
}

type mRepositoryMockGetList struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetListExpectation
	expectations       []*RepositoryMockGetListExpectation

	callArgs []*RepositoryMockGetListParams
	mutex    sync.RWMutex
}

// RepositoryMockGetListExpectation specifies expectation struct of the Repository.GetList
type RepositoryMockGetListExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockGetListParams
	results *RepositoryMockGetListResults
	Counter uint64
}

// RepositoryMockGetListParams contains parameters of the Repository.GetList
type RepositoryMockGetListParams struct {
	ctx    context.Context
	filter *mm_unit_repository.Query
}

// RepositoryMockGetListResults contains results of the Repository.GetList
type RepositoryMockGetListResults struct {
	upa1 []*model.Unit
	err  error
}

// Expect sets up expected params for Repository.GetList
func (mmGetList *mRepositoryMockGetList) Expect(ctx context.Context, filter *mm_unit_repository.Query) *mRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("RepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &RepositoryMockGetListExpectation{}
	}

	mmGetList.defaultExpectation.params = &RepositoryMockGetListParams{ctx, filter}
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetList
func (mmGetList *mRepositoryMockGetList) Inspect(f func(ctx context.Context, filter *mm_unit_repository.Query)) *mRepositoryMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by Repository.GetList
func (mmGetList *mRepositoryMockGetList) Return(upa1 []*model.Unit, err error) *RepositoryMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("RepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &RepositoryMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &RepositoryMockGetListResults{upa1, err}
	return mmGetList.mock
}

//Set uses given function f to mock the Repository.GetList method
func (mmGetList *mRepositoryMockGetList) Set(f func(ctx context.Context, filter *mm_unit_repository.Query) (upa1 []*model.Unit, err error)) *RepositoryMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the Repository.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the Repository.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// When sets expectation for the Repository.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mRepositoryMockGetList) When(ctx context.Context, filter *mm_unit_repository.Query) *RepositoryMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("RepositoryMock.GetList mock is already set by Set")
	}

	expectation := &RepositoryMockGetListExpectation{
		mock:   mmGetList.mock,
		params: &RepositoryMockGetListParams{ctx, filter},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetList return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetListExpectation) Then(upa1 []*model.Unit, err error) *RepositoryMock {
	e.results = &RepositoryMockGetListResults{upa1, err}
	return e.mock
}

// GetList implements unit_repository.Repository
func (mmGetList *RepositoryMock) GetList(ctx context.Context, filter *mm_unit_repository.Query) (upa1 []*model.Unit, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx, filter)
	}

	mm_params := &RepositoryMockGetListParams{ctx, filter}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.upa1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_got := RepositoryMockGetListParams{ctx, filter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("RepositoryMock.GetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the RepositoryMock.GetList")
		}
		return (*mm_results).upa1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx, filter)
	}
	mmGetList.t.Fatalf("Unexpected call to RepositoryMock.GetList. %v %v", ctx, filter)
	return
}

// GetListAfterCounter returns a count of finished RepositoryMock.GetList invocations
func (mmGetList *RepositoryMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of RepositoryMock.GetList invocations
func (mmGetList *RepositoryMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mRepositoryMockGetList) Calls() []*RepositoryMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*RepositoryMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetListDone() bool {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetListInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetList")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetList with params: %#v", *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.GetList")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetListInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetListDone()
}
